package repositories;

import domain.Challenge;
import domain.ChallengeParticipation;
import domain.ChallengeResponse;
import domain.User;
import play.db.DB;
import play.db.jpa.JPA;

import javax.persistence.Query;
import java.sql.Connection;

public class ChallengesRepository {

    public Challenge createChallenge(User user, String challengeName) {
        Challenge challenge = new Challenge(user, challengeName);
        JPA.em().persist(challenge);
        return challenge;
    }

    public boolean isChallengeWithGivenNameExistsForUser(String challengeName, String creatorUsername) {
        Query challengesWithNameOfCreatorNrQuery = JPA.em().createQuery("SELECT count(c) " +
                                                        "FROM Challenge c " +
                                                        "WHERE LOWER(c.challengeName) = LOWER(:challengeName) " +
                                                        "AND LOWER(c.creator.username) = LOWER(:creatorUsername)");
        challengesWithNameOfCreatorNrQuery.setParameter("challengeName", challengeName);
        challengesWithNameOfCreatorNrQuery.setParameter("creatorUsername", creatorUsername);
        Long challengesWithNameOfCreatorNr = (Long) challengesWithNameOfCreatorNrQuery.getSingleResult();
        return challengesWithNameOfCreatorNr > 0;
    }

    public ChallengeParticipation createChallengeParticipation(Challenge challenge, User user) {
        ChallengeParticipation challengeParticipation = new ChallengeParticipation(challenge, user);
        JPA.em().persist(challengeParticipation);
        return challengeParticipation;
    }

    //todo check sql generated by hibernate -> if there is not unnecessary join with Challenge added
    public boolean isUserParticipatingInChallenge(Challenge challenge, String participatorUsername) {
        Query usernameUsersParticipatingNrQuery = JPA.em().createQuery("SELECT count(p) " +
                                                                    "FROM ChallengeParticipation p " +
                                                                    "WHERE p.challenge = :challenge " +
                                                                    "AND LOWER(p.participator.username) = LOWER(:participatorUsername)");
        Long usernameUsersParticipatingNr = (Long) usernameUsersParticipatingNrQuery.getSingleResult();
        return usernameUsersParticipatingNr > 0;
    }

    public ChallengeResponse addChallengeResponse(ChallengeParticipation challengeParticipation) {
        ChallengeResponse challengeResponse = new ChallengeResponse(challengeParticipation);
        JPA.em().persist(challengeResponse);
        return challengeResponse;
    }

    public ChallengeParticipation getChallengeParticipation(Challenge challenge, String participatorUsername) {
        return new ChallengeParticipation(challenge, new User(participatorUsername));
    }

    public boolean isNotScoredChallengeResponseExistsFor(ChallengeParticipation challengeParticipation) {
        return false;
    }

    /**
     * TO_DO This method is not yet implemented
     */
    public Challenge getChallenge(long id){ return new Challenge(new User("testUser"), "test challenge"); }
}
